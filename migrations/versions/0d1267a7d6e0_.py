"""empty message

Revision ID: 0d1267a7d6e0
Revises: 
Create Date: 2019-05-19 05:46:58.353348

"""
from alembic import op
import sqlalchemy as sa


# revision identifiers, used by Alembic.
revision = '0d1267a7d6e0'
down_revision = None
branch_labels = None
depends_on = None


def upgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('coursecount',
    sa.Column('course_ID', sa.String(), nullable=False),
    sa.Column('count_students', sa.Integer(), nullable=False),
    sa.Column('count_tutors', sa.Integer(), nullable=False),
    sa.ForeignKeyConstraint(['course_ID'], ['course.course_ID'], ),
    sa.PrimaryKeyConstraint('course_ID')
    )
    op.create_table('coursematch',
    sa.Column('course_ID', sa.String(), nullable=False),
    sa.Column('tutor_ID_1', sa.String(), nullable=False),
    sa.Column('tutor_ID_2', sa.String(), nullable=True),
    sa.ForeignKeyConstraint(['course_ID'], ['course.course_ID'], ),
    sa.ForeignKeyConstraint(['tutor_ID_1'], ['tutor.tutor_ID'], ),
    sa.ForeignKeyConstraint(['tutor_ID_2'], ['tutor.tutor_ID'], ),
    sa.PrimaryKeyConstraint('course_ID')
    )
    op.create_table('courseroom',
    sa.Column('course_ID', sa.String(), nullable=False),
    sa.Column('room_ID_1', sa.String(), nullable=True),
    sa.Column('room_ID_2', sa.String(), nullable=True),
    sa.ForeignKeyConstraint(['course_ID'], ['course.course_ID'], ),
    sa.ForeignKeyConstraint(['room_ID_1'], ['room.room_ID'], ),
    sa.ForeignKeyConstraint(['room_ID_2'], ['room.room_ID'], ),
    sa.PrimaryKeyConstraint('course_ID')
    )
    op.create_table('studentavailability',
    sa.Column('student_ID', sa.String(), nullable=False),
    sa.Column('day_ID', sa.String(), nullable=False),
    sa.Column('start_time', sa.String(), nullable=False),
    sa.Column('end_time', sa.String(), nullable=False),
    sa.ForeignKeyConstraint(['day_ID'], ['day.day_ID'], ),
    sa.ForeignKeyConstraint(['student_ID'], ['student.student_ID'], ),
    sa.PrimaryKeyConstraint('student_ID', 'day_ID', 'start_time', 'end_time')
    )
    op.create_table('studentmatch',
    sa.Column('tutor_ID', sa.String(), nullable=False),
    sa.Column('student_ID', sa.String(), nullable=False),
    sa.ForeignKeyConstraint(['student_ID'], ['student.student_ID'], ),
    sa.ForeignKeyConstraint(['tutor_ID'], ['tutor.tutor_ID'], ),
    sa.PrimaryKeyConstraint('tutor_ID', 'student_ID')
    )
    op.create_table('studentpreference',
    sa.Column('student_ID', sa.String(), nullable=False),
    sa.Column('stuCourse_ID_1', sa.String(), nullable=False),
    sa.Column('stuCourse_ID_2', sa.String(), nullable=True),
    sa.ForeignKeyConstraint(['stuCourse_ID_1'], ['course.course_ID'], ),
    sa.ForeignKeyConstraint(['stuCourse_ID_2'], ['course.course_ID'], ),
    sa.ForeignKeyConstraint(['student_ID'], ['student.student_ID'], ),
    sa.PrimaryKeyConstraint('student_ID')
    )
    op.create_table('tutoravailability',
    sa.Column('tutor_ID', sa.String(), nullable=False),
    sa.Column('day_ID', sa.String(), nullable=False),
    sa.Column('start_time', sa.String(), nullable=False),
    sa.Column('end_time', sa.String(), nullable=False),
    sa.ForeignKeyConstraint(['day_ID'], ['day.day_ID'], ),
    sa.ForeignKeyConstraint(['tutor_ID'], ['tutor.tutor_ID'], ),
    sa.PrimaryKeyConstraint('tutor_ID', 'day_ID', 'start_time', 'end_time')
    )
    op.create_table('tutorpreference',
    sa.Column('tutor_ID', sa.String(), nullable=False),
    sa.Column('preference_1', sa.String(), nullable=False),
    sa.Column('preference_2', sa.String(), nullable=True),
    sa.ForeignKeyConstraint(['preference_1'], ['course.course_ID'], ),
    sa.ForeignKeyConstraint(['preference_2'], ['course.course_ID'], ),
    sa.ForeignKeyConstraint(['tutor_ID'], ['tutor.tutor_ID'], ),
    sa.PrimaryKeyConstraint('tutor_ID')
    )
    op.drop_table('courseCount')
    op.drop_table('studentPreference')
    op.drop_table('CourseRoom')
    op.drop_table('studentMatch')
    op.drop_table('tutorPreference')
    op.drop_table('courseMatch')
    op.drop_table('studentAvailability')
    op.drop_table('tutorAvailability')
    # ### end Alembic commands ###


def downgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('tutorAvailability',
    sa.Column('tutor_ID', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('day_ID', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('start_time', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('end_time', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.ForeignKeyConstraint(['day_ID'], [u'day.day_ID'], name=u'tutorAvailability_day_ID_fkey'),
    sa.ForeignKeyConstraint(['tutor_ID'], [u'tutor.tutor_ID'], name=u'tutorAvailability_tutor_ID_fkey'),
    sa.PrimaryKeyConstraint('tutor_ID', 'day_ID', 'start_time', 'end_time', name=u'tutorAvailability_pkey')
    )
    op.create_table('studentAvailability',
    sa.Column('student_ID', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('day_ID', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('start_time', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('end_time', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.ForeignKeyConstraint(['day_ID'], [u'day.day_ID'], name=u'studentAvailability_day_ID_fkey'),
    sa.ForeignKeyConstraint(['student_ID'], [u'student.student_ID'], name=u'studentAvailability_student_ID_fkey'),
    sa.PrimaryKeyConstraint('student_ID', 'day_ID', 'start_time', 'end_time', name=u'studentAvailability_pkey')
    )
    op.create_table('courseMatch',
    sa.Column('course_ID', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('tutor_ID_1', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('tutor_ID_2', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['course_ID'], [u'course.course_ID'], name=u'courseMatch_course_ID_fkey'),
    sa.ForeignKeyConstraint(['tutor_ID_1'], [u'tutor.tutor_ID'], name=u'courseMatch_tutor_ID_1_fkey'),
    sa.ForeignKeyConstraint(['tutor_ID_2'], [u'tutor.tutor_ID'], name=u'courseMatch_tutor_ID_2_fkey'),
    sa.PrimaryKeyConstraint('course_ID', name=u'courseMatch_pkey')
    )
    op.create_table('tutorPreference',
    sa.Column('tutor_ID', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('preference_1', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('preference_2', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['preference_1'], [u'course.course_ID'], name=u'tutorPreference_preference_1_fkey'),
    sa.ForeignKeyConstraint(['preference_2'], [u'course.course_ID'], name=u'tutorPreference_preference_2_fkey'),
    sa.ForeignKeyConstraint(['tutor_ID'], [u'tutor.tutor_ID'], name=u'tutorPreference_tutor_ID_fkey'),
    sa.PrimaryKeyConstraint('tutor_ID', name=u'tutorPreference_pkey')
    )
    op.create_table('studentMatch',
    sa.Column('tutor_ID', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('student_ID', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.ForeignKeyConstraint(['student_ID'], [u'student.student_ID'], name=u'studentMatch_student_ID_fkey'),
    sa.ForeignKeyConstraint(['tutor_ID'], [u'tutor.tutor_ID'], name=u'studentMatch_tutor_ID_fkey'),
    sa.PrimaryKeyConstraint('tutor_ID', 'student_ID', name=u'studentMatch_pkey')
    )
    op.create_table('CourseRoom',
    sa.Column('course_ID', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('room_ID_1', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('room_ID_2', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['course_ID'], [u'course.course_ID'], name=u'CourseRoom_course_ID_fkey'),
    sa.ForeignKeyConstraint(['room_ID_1'], [u'room.room_ID'], name=u'CourseRoom_room_ID_1_fkey'),
    sa.ForeignKeyConstraint(['room_ID_2'], [u'room.room_ID'], name=u'CourseRoom_room_ID_2_fkey'),
    sa.PrimaryKeyConstraint('course_ID', name=u'CourseRoom_pkey')
    )
    op.create_table('studentPreference',
    sa.Column('student_ID', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('stuCourse_ID_1', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('stuCourse_ID_2', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['stuCourse_ID_1'], [u'course.course_ID'], name=u'studentPreference_stuCourse_ID_1_fkey'),
    sa.ForeignKeyConstraint(['stuCourse_ID_2'], [u'course.course_ID'], name=u'studentPreference_stuCourse_ID_2_fkey'),
    sa.ForeignKeyConstraint(['student_ID'], [u'student.student_ID'], name=u'studentPreference_student_ID_fkey'),
    sa.PrimaryKeyConstraint('student_ID', name=u'studentPreference_pkey')
    )
    op.create_table('courseCount',
    sa.Column('course_ID', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('count_students', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('count_tutors', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.ForeignKeyConstraint(['course_ID'], [u'course.course_ID'], name=u'courseCount_course_ID_fkey'),
    sa.PrimaryKeyConstraint('course_ID', name=u'courseCount_pkey')
    )
    op.drop_table('tutorpreference')
    op.drop_table('tutoravailability')
    op.drop_table('studentpreference')
    op.drop_table('studentmatch')
    op.drop_table('studentavailability')
    op.drop_table('courseroom')
    op.drop_table('coursematch')
    op.drop_table('coursecount')
    # ### end Alembic commands ###
